//
//  Planetarium control (PlanetC) plug-in for Stellarium
//
//  Copyright (C) 2016 Giorgio Calderone
//
//  This program is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public icense
//  as published by the Free Software Foundation; either version 2
//  of the License, or (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program. If not, see <http://www.gnu.org/licenses/>.
//


/* ***************************************************************** */
function planetc_dump(obj)
{ for (x in obj) core.debug(x + ": " + obj[x]); }



/* ***************************************************************** */
function planetc_AutoZoomIn(timeMove, timeZoom)
{
    obj = core.getSelectedObjectInfo();
    if (!obj.found) { return; }

    //In "Dome" mode we can toggle mount mode before zooming in,
    //avoiding changing mode while the object is well visible. In
    //non-"dome" mode we toggle after zooming in to avoid
    //moving the horizon.
    if (planetc_domeMode) {
        StelMovementMgr.setEquatorialMount(true);
    }

    //Save current alt/azi/fov
    planetc_autozoom.alt = core.getViewAltitudeAngle();
    planetc_autozoom.azi = core.getViewAzimuthAngle();
    planetc_autozoom.fov = StelMovementMgr.getCurrentFov();
    planetc_autozoom.utcdate = core.getDate("utc");

    //Zoom in to a FOV=10 times the size of the object
    fov = obj["size-dd"] * 10.;

    //If FOV is too small (e.g. for stars) stop at a reasonable level
    if (obj["type"] == "Star")  { fov = 0.5; }
    if (obj["AllInfo"].indexOf("Type: <b>comet</b>") > -1) { fov = 20; }

    core.setTimeRate(0);
    core.moveToObject(timeMove);
    StelMovementMgr.zoomTo(fov, timeZoom);
    core.wait( Math.max(timeMove, timeZoom) );
    StelMovementMgr.setFlagTracking(true);
    StelMovementMgr.setEquatorialMount(true);
}


/* ***************************************************************** */
function planetc_AutoZoomOut(timeMove, timeZoom)
{
	// This must be done here otherwise core.moveToAltAzi would have
	// no effect.
    StelMovementMgr.setEquatorialMount(false);
	
    if (planetc_domeMode) {
        //Reset Planetarium view
        planetc_autozoom.alt = 89.9;
        planetc_autozoom.azi = 180;
        planetc_autozoom.fov = 180;
    }
    else
        StelMovementMgr.setEquatorialMount(false);

    core.setTimeRate(0);
    core.setDate(planetc_autozoom.utcdate, "utc");

    StelMovementMgr.zoomTo(planetc_autozoom.fov, timeZoom);
    while (StelMovementMgr.getCurrentFov() < planetc_autozoom.fov / 2.) {
        core.wait(0.05);
        timeZoom -= 0.05;
    }
    StelMovementMgr.setFlagTracking(false);
    core.moveToAltAzi(planetc_autozoom.alt, planetc_autozoom.azi, timeMove);
    core.wait( Math.max(timeMove, timeZoom) );
    StelMovementMgr.setEquatorialMount(false);
}




/* ***************************************************************** */
function planetc_set_state(state) {
    //planetc_dump(state);

    //Switch off everything
    core.setTimeRate(0);

    ConstellationMgr.setFlagIsolateSelected(false);
    core.selectObjectByName("Sun", true);
    core.selectObjectByName("", true);

    LabelMgr.deleteAllLabels();

    LandscapeMgr.setFlagLandscape       (false);
    LandscapeMgr.setFlagFog             (false);
    LandscapeMgr.setFlagAtmosphere      (false);
    LandscapeMgr.setFlagCardinalsPoints (false);
    MilkyWay.setIntensity               (0);
    ZodiacalLight.setFlagShow           (false);

    ConstellationMgr.setFlagArt         (false);
    ConstellationMgr.setFlagLines       (false);
    ConstellationMgr.setFlagBoundaries  (false);
    ConstellationMgr.setFlagLabels      (false);

    GridLinesMgr.setFlagAzimuthalGrid   (false);
    GridLinesMgr.setFlagEquatorGrid     (false);
    GridLinesMgr.setFlagGalacticGrid    (false);
    GridLinesMgr.setFlagEquatorLine     (false);
    GridLinesMgr.setFlagEclipticLine    (false);
    GridLinesMgr.setFlagMeridianLine    (false);
    GridLinesMgr.setFlagHorizonLine     (false);

    NebulaMgr.setFlagShow               (false);
    NebulaMgr.setFlagHints              (false);

    SolarSystem.setFlagPlanets          (false);
    SolarSystem.setFlagLabels           (false);

    StarMgr.setFlagStars                (false);
    StarMgr.setFlagLabels               (false);


    core.wait(1);


    //Set state
    LandscapeMgr.setCurrentLandscapeName(state.landscapeLoc);

    //core.debug("Location : " + state.obsLoc.planet + " - " + state.obsLoc.location);
    //core.debug("Landscape: " + state.landscapeLoc);
    //core.debug("Date     : " + state.date);
    //core.debug("Lon      : " + state.obsLoc.longitude);
    //core.debug("Lat      : " + state.obsLoc.latitude);

    core.setObserverLocation(state.obsLoc.longitude,
                             state.obsLoc.latitude,
                             state.obsLoc.altitude, 0,
                             state.obsLoc.location,
                             state.obsLoc.planet);


    core.setDate                     (state.date, "local", false);
    core.setMountMode                (state.mount);

    StelMovementMgr.setFlagLockEquPos(false);
    StelMovementMgr.setFlagTracking  (false);

    StelMovementMgr.setFlagLockEquPos   (state.EquLock);
    StelMovementMgr.setFlagTracking     (state.track);


    //Wait to allow previous settings to become active
    core.wait(1.);

    StelMovementMgr.zoomTo              (state.fov, 0);
    //core.debug(state.mount);
    if (state.mount == "equatorial") {
        //core.debug(state.viewRA);
        //core.debug(state.viewDec);
        core.moveToRaDec(state.viewRA  , state.viewDec, 0);
    }
    else {
        //core.debug(state.viewAlt);
        //core.debug(state.viewAz);
        core.moveToAltAzi(state.viewAlt, state.viewAz , 0);
    }



    LandscapeMgr.setFlagLandscape       (state.landscape);
    LandscapeMgr.setFlagFog             (state.fog);
    LandscapeMgr.setFlagAtmosphere      (state.atmo);
    LandscapeMgr.setFlagCardinalsPoints (state.cardpo);
    MilkyWay.setIntensity               (state.milky);
    ZodiacalLight.setFlagShow           (true);

    ConstellationMgr.setFlagIsolateSelected(state.selIsolated);
    ConstellationMgr.setFlagArt         (state.constArt);
    ConstellationMgr.setFlagLines       (state.constLine);
    ConstellationMgr.setFlagBoundaries  (state.constBound);
    ConstellationMgr.setFlagLabels      (state.constLabel);

    GridLinesMgr.setFlagAzimuthalGrid   (state.gridAZ   );
    GridLinesMgr.setFlagEquatorGrid     (state.gridEqu  );
    GridLinesMgr.setFlagGalacticGrid    (state.gridGal  );
    GridLinesMgr.setFlagEquatorLine     (state.lineEq   );
    GridLinesMgr.setFlagEclipticLine    (state.lineEcl  );
    GridLinesMgr.setFlagMeridianLine    (state.lineMerid);
    GridLinesMgr.setFlagHorizonLine     (state.lineHoriz);

    NebulaMgr.setFlagShow               (state.nebula);
    NebulaMgr.setFlagHints              (false);

    SolarSystem.setFlagPlanets          (state.planet);
    SolarSystem.setFlagLabels           (state.planetLab);

    StarMgr.setFlagStars                (state.star);
    StarMgr.setFlagLabels               (state.starLab);

    StelSkyDrawer.setBortleScaleIndex   (state.bortleScale);
    //planetc_dump(StelMovementMgr.getViewDirectionJ2000());
}


/* ***************************************************************** */
function planetc_get_state() {
    var state = {
        "obsLoc"         : core.getObserverLocationInfo()
        , "mount"        : core.getMountMode()
        , "date"         : core.getDate("local")
        , "viewAlt"      : core.getViewAltitudeAngle()
        , "viewAz"       : core.getViewAzimuthAngle()
        , "viewRA"       : core.getViewRaAngle()
        , "viewDec"      : core.getViewDecAngle()
        , "viewRAJ2000"  : core.getViewRaJ2000Angle()
        , "viewDecJ2000" : core.getViewDecJ2000Angle()

        , "EquLock"      : StelMovementMgr.getFlagLockEquPos()
        , "fov"          : StelMovementMgr.getCurrentFov()
        , "track"        : StelMovementMgr.getFlagTracking()

        , "landscapeLoc" : LandscapeMgr.getCurrentLandscapeName()
        , "landscape"    : LandscapeMgr.getFlagLandscape()
        , "fog"          : LandscapeMgr.getFlagFog()
        , "atmo"         : LandscapeMgr.getFlagAtmosphere()
        , "cardpo"       : LandscapeMgr.getFlagCardinalsPoints()
        , "milky"        : MilkyWay.getIntensity()

        , "selIsolated"  : ConstellationMgr.getFlagIsolateSelected()
        , "constArt"     : ConstellationMgr.getFlagArt()
        , "constLine"    : ConstellationMgr.getFlagLines()
        , "constBound"   : ConstellationMgr.getFlagBoundaries()
        , "constLabel"   : ConstellationMgr.getFlagLabels()

        , "gridAZ"       : GridLinesMgr.getFlagAzimuthalGrid()
        , "gridEqu"      : GridLinesMgr.getFlagEquatorGrid  ()
        , "gridGal"      : GridLinesMgr.getFlagGalacticGrid ()
        , "lineEq"       : GridLinesMgr.getFlagEquatorLine  ()
        , "lineEcl"      : GridLinesMgr.getFlagEclipticLine ()
        , "lineMerid"    : GridLinesMgr.getFlagMeridianLine ()
        , "lineHoriz"    : GridLinesMgr.getFlagHorizonLine  ()

        , "nebula"       : NebulaMgr.getFlagShow()
        , "planet"       : SolarSystem.getFlagPlanets()
        , "planetLab"    : SolarSystem.getFlagLabels()

        , "star"         : StarMgr.getFlagStars()
        , "starLab"      : StarMgr.getFlagLabels()
        , "bortleScale"  : 2
    };

    //Sometimes Stellarium returns the country name multiple times.
    //Therefore I consider only the first two comma-separated tokens.
    a = state.obsLoc.location;
    b = a.split(",", 2);
    c = b.join(",");
    state.obsLoc.location = c;
    //core.debug("Location : " + state.obsLoc.planet + " - " + state.obsLoc.location);

    //planetc_dump(state);
    return state;
}





/* ***************************************************************** */
function planetc_initializeDomeMode(startDate) {
    core.setNightMode(false);
    core.setProjectionMode("ProjectionFisheye");
    //core.setProjectionMode("Stereographic");
    core.setDiskViewport(true);
    core.setSkyCulture("western");
    core.setFlagGravityLabels(true);
    core.setAppLanguage("en");
    StelSkyDrawer.setBortleScaleIndex(2);

    //--------------------------------------------------------------------
    //SolarSystem.setFlagTrails(true);
    //SolarSystem.setFlagOrbits(true);
    //SolarSystem.setFlagMoonScale(false);


    //StelMovementMgr.setEquatorialMount(false);
    //StelMovementMgr.setFlagAutoZoomOutResetsDirection(true);
    //StelMovementMgr.setFlagTracking(true);
    //StelMovementMgr.setFlagLockEquPos(false);

    //Setup "Planetarium" state
    state = planetc_get_state();
    state.date          = startDate;
    state.mount         = "azimuthal";
    state.viewAlt       = 89.9; //If set to 90 it causes troubles with Landscape changing
    state.viewAz        = 180;
    state.fov           = 180;
    state.EquLock       = 0;
    state.track         = 0;
    state.cursorTimeout = 0;
    state.landscapeLoc  = "Garching";
    state.landscape     = 1;
    state.fog           = 1;
    state.atmo          = 1;
    state.cardpo        = 1;
    state.selIsolated   = 0;
    state.constArt      = 0;
    state.constLine     = 0;
    state.constBound    = 0;
    state.constLabel    = 0;
    state.gridAZ        = 0;
    state.gridEqu       = 0;
    state.gridGal       = 0;
    state.lineEq        = 0;
    state.lineEcl       = 0;
    state.lineMerid     = 0;
    state.lineHoriz     = 0;
    state.nebula        = 0;
    state.planet        = 1;
    state.planetLab     = 0;
    state.star          = 1;
    state.starLab       = 0;

    //Setup initial state and save it as "home"
    planetc_set_state( state );
    planetc_home_state = state;
    planetc_domeMode = 1;
}


var planetc_home_state = planetc_get_state();
var planetc_autozoom = { "alt": 0., "azi": 0., "fov": 0., "utcdate": ""};
var planetc_domeMode = 0;
